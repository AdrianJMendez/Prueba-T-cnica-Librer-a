@page "/libros/registrar"
@inject LibroService LibroService
@inject AutorService AutorService
@inject NavigationManager NavManager

@using LibreriaApp.Client.Services
@using LibreriaApp.Shared.DTOs
@using MudBlazor

<MudPaper Class="p-8 max-w-xl mx-auto mt-10 rounded-2xl shadow-md bg-white">
    <MudText Typo="Typo.h4" Class="mb-6 text-center text-primary font-semibold">
        Registrar Nuevo Libro
    </MudText>

    @if (mostrarMensaje)
    {
        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-4">
            @mensaje
        </MudAlert>
    }

    <MudForm @ref="form">
        <MudStack Spacing="3">
            <MudTextField Label="Título" @bind-Value="libro.Titulo" Variant="Variant.Filled" Style="font-size: 1.5rem;" />
            <MudTextField Label="Año" @bind-Value="libro.Anio" Type="number" Variant="Variant.Filled" Style="font-size: 1.5rem;" />
            <MudTextField Label="Género" @bind-Value="libro.Genero" Variant="Variant.Filled" Style="font-size: 1.5rem;" />
            <MudTextField Label="Número de páginas" @bind-Value="libro.NumeroPaginas" Type="number" Variant="Variant.Filled" Style="font-size: 1.5rem;" />

            <MudItem>
                <label class="block mb-1 text-sm font-medium text-gray-700">Autor: </label>
                <select @bind="libro.AutorId"
                        class="w-full text-base px-3 py-3 rounded-md bg-gray-100 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition">
                    <option disabled value="">-- Selecciona un autor --</option>
                    @foreach (var autor in autores)
                    {
                        <option value="@autor.Id">@autor.NombreCompleto</option>
                    }
                </select>
            </MudItem>

            <MudButton OnClick="CrearLibroAsync" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" Class="mt-4 w-full">
                Guardar
            </MudButton>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    private LibroCrearDto libro = new();
    private List<AutorDto> autores = new();
    private MudForm form = default!;

    private string? mensaje;
    private bool mostrarMensaje;

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += OnLocationChanged;

        var uri = new Uri(NavManager.Uri);
        var queryParams = GetQueryParams(uri.Query);

        if (queryParams.TryGetValue("exito", out var exito) && exito == "libro")
        {
            mensaje = "Libro registrado con éxito.";
            mostrarMensaje = true;

            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                mensaje = null;
                mostrarMensaje = false;
                await InvokeAsync(StateHasChanged);
            });
        }

        autores = await AutorService.ObtenerTodosAsync();
    }

    private async Task CrearLibroAsync()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                await LibroService.CrearLibroAsync(libro);
                await Task.Delay(300);
                NavManager.NavigateTo("/libros/registrar?exito=libro", true);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al registrar el libro: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Formulario inválido");
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    private Dictionary<string, string> GetQueryParams(string query)
    {
        var dict = new Dictionary<string, string>();
        if (string.IsNullOrWhiteSpace(query))
            return dict;

        query = query.TrimStart('?');
        var pairs = query.Split('&', StringSplitOptions.RemoveEmptyEntries);

        foreach (var pair in pairs)
        {
            var kv = pair.Split('=', 2);
            if (kv.Length == 2)
            {
                var key = Uri.UnescapeDataString(kv[0]);
                var value = Uri.UnescapeDataString(kv[1]);
                dict[key] = value;
            }
        }

        return dict;
    }
}
