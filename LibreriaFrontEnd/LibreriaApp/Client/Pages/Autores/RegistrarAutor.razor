@page "/autores/registrar"
@inject AutorService AutorService
@inject NavigationManager NavManager

@using LibreriaApp.Shared.DTOs
@using MudBlazor
@using LibreriaApp.Client.Services

<MudPaper Class="p-8 max-w-xl mx-auto mt-10 rounded-2xl shadow-md bg-white">
    <MudText Typo="Typo.h4" Class="mb-6 text-center text-primary font-semibold">
        Registrar Nuevo Autor
    </MudText>

    @if (mostrarMensaje)
    {
        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-4">
            @mensaje
        </MudAlert>
    }

    <MudForm @ref="form">
        <MudStack Spacing="3">
            <MudTextField 
                Label="Nombre completo" 
                @bind-Value="autor.NombreCompleto" 
                Required="true" 
                Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.Person" 
                Variant="Variant.Filled"
                Style="font-size: 1.5rem;" />

            <MudDatePicker 
                Label="Fecha de nacimiento"
                Editable="true"
                @bind-Date="autor.FechaNacimiento"
                Mask="@(new DateMask("0000-00-00"))"
                DateFormat="yyyy-MM-dd"
                Placeholder="yyyy-MM-dd"
                Variant="Variant.Filled"
                Required="true"
                Style="font-size: 1.5rem;" />

            <MudTextField 
                Label="Ciudad de procedencia" 
                @bind-Value="autor.Ciudad" 
                Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.LocationCity"
                Variant="Variant.Filled"
                Style="font-size: 1.5rem;" />

            <MudTextField 
                Label="Correo electrónico" 
                @bind-Value="autor.CorreoElectronico" 
                Type="email" 
                Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.Email" 
                Variant="Variant.Filled"
                Style="font-size: 1.5rem;" />

            <MudButton 
                OnClick="@GuardarAutor" 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Save" 
                Class="mt-4 w-full text-xl">
                Guardar
            </MudButton>
        </MudStack>
    </MudForm>
</MudPaper>

@code {
    private string? mensaje;
    private bool mostrarMensaje;
    private AutorCrearDto autor = new() { FechaNacimiento = DateTime.Today };
    private MudForm form = default!;

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += OnLocationChanged;

        var uri = new Uri(NavManager.Uri);
        var queryParams = GetQueryParams(uri.Query);

        if (queryParams.TryGetValue("exito", out var exito) && exito == "autor")
        {
            mensaje = "Autor registrado con éxito.";
            mostrarMensaje = true;

            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                mensaje = null;
                mostrarMensaje = false;
                await InvokeAsync(StateHasChanged);
            });
        }

        await CargarDatosAsync();
    }

    private async Task CargarDatosAsync()
    {
        await Task.CompletedTask;
    }

    private async Task GuardarAutor()
    {
        await form.Validate();

        if (form.IsValid)
        {
            try
            {
                await AutorService.RegistrarAsync(autor);
                await Task.Delay(300);
                NavManager.NavigateTo("/autores/registrar?exito=autor", true);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al registrar el autor: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Formulario inválido");
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        StateHasChanged();
    }

    private Dictionary<string, string> GetQueryParams(string query)
    {
        var dict = new Dictionary<string, string>();
        if (string.IsNullOrWhiteSpace(query))
            return dict;

        query = query.TrimStart('?');
        var pairs = query.Split('&', StringSplitOptions.RemoveEmptyEntries);

        foreach (var pair in pairs)
        {
            var kv = pair.Split('=', 2);
            if (kv.Length == 2)
            {
                var key = Uri.UnescapeDataString(kv[0]);
                var value = Uri.UnescapeDataString(kv[1]);
                dict[key] = value;
            }
        }

        return dict;
    }
}
